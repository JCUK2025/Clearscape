let data = JSON.parse(localStorage.getItem('clearscape-data') || '[]');

// Render transaction history
function renderHistory(filtered = data) {
  const container = document.getElementById('history-list');
  container.innerHTML = '';

  if (filtered.length === 0) {
    container.innerHTML = '<p>No transactions found.</p>';
    return;
  }

  filtered.forEach((tx, index) => {
    const entry = document.createElement('div');
    entry.className = 'history-entry';
    entry.innerHTML = `
      <strong>${tx.date}</strong> ‚Äì ${tx.type.toUpperCase()}<br>
      ${tx.name || 'Unnamed'} (${tx.jobType})<br>
      ¬£${tx.amountDue.toFixed(2)} ${tx.amountPaid ? `paid ¬£${tx.amountPaid.toFixed(2)}` : ''}
      <div class="history-actions">
        <button onclick="editEntry(${index})">‚úèÔ∏è Edit</button>
        <button onclick="deleteEntry(${index})">üóëÔ∏è Delete</button>
        ${tx.type === 'sale' && tx.amountPaid < tx.amountDue ? `<button onclick="addPayment(${index})">üí≥ Add Payment</button>` : ''}
      </div>
    `;
    container.appendChild(entry);
  });
}

// Apply filters
function applyFilters() {
  const type = document.getElementById('filter-type').value;
  const name = document.getElementById('filter-name').value.toLowerCase();
  const from = document.getElementById('filter-from').value;
  const to = document.getElementById('filter-to').value;

  const filtered = data.filter(tx => {
    const matchType = type ? tx.type === type : true;
    const matchName = name ? tx.name.toLowerCase().includes(name) : true;
    const matchFrom = from ? tx.date >= from : true;
    const matchTo = to ? tx.date <= to : true;
    return matchType && matchName && matchFrom && matchTo;
  });

  renderHistory(filtered);
}

// Scroll to latest transaction
function scrollToLatest() {
  const container = document.getElementById('history-scroll');
  container.scrollTop = container.scrollHeight;
}

// Edit transaction
function editEntry(index) {
  const tx = data[index];
  const newPaid = prompt(`Enter new paid amount for ${tx.name || 'Unnamed'}:`, tx.amountPaid || 0);
  if (newPaid !== null) {
    tx.amountPaid = parseFloat(newPaid);
    localStorage.setItem('clearscape-data', JSON.stringify(data));
    renderHistory();
  }
}

// Delete transaction
function deleteEntry(index) {
  if (confirm('Are you sure you want to delete this transaction?')) {
    data.splice(index, 1);
    localStorage.setItem('clearscape-data', JSON.stringify(data));
    renderHistory();
  }
}

// Add payment
function addPayment(index) {
  const tx = data[index];
  const remaining = tx.amountDue - (tx.amountPaid || 0);
  const add = prompt(`Add payment for ${tx.name || 'Unnamed'} (up to ¬£${remaining.toFixed(2)}):`, '');
  if (add !== null) {
    tx.amountPaid = (tx.amountPaid || 0) + parseFloat(add);
    localStorage.setItem('clearscape-data', JSON.stringify(data));
    renderHistory();
  }
}

// Export CSV
function exportCSV() {
  const rows = [
    ['Date', 'Name', 'Type', 'Job Type', 'Amount Due', 'Amount Paid', 'Notes', 'Recurrence', 'Payment Method']
  ];

  data.forEach(tx => {
    rows.push([
      tx.date,
      tx.name,
      tx.type,
      tx.jobType,
      tx.amountDue,
      tx.amountPaid || '',
      tx.notes || '',
      tx.recurrence || '',
      tx.paymentMethod || ''
    ]);
  });

  const csv = rows.map(r => r.join(',')).join('\n');
  document.getElementById('csv-content').textContent = csv;
  document.getElementById('csv-preview').style.display = 'flex';
}

// Download CSV
function downloadCSV() {
  const content = document.getElementById('csv-content').textContent;
  const blob = new Blob([content], { type: 'text/csv' });
  const link = document.createElement('a');
  link.href = URL.createObjectURL(blob);
  link.download = `clearscape-history-${new Date().toISOString().slice(0,10)}.csv`;
  link.click();
  closePreview();
}

// Close preview
function closePreview() {
  document.getElementById('csv-preview').style.display = 'none';
}

// Initial render
window.addEventListener('DOMContentLoaded', renderHistory);
