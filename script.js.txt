// script.js

// === STATE & SETUP ===
let transactions = JSON.parse(localStorage.getItem('transactions')) || [];
let clients = JSON.parse(localStorage.getItem('clients')) || [];
let initialBalance = parseFloat(localStorage.getItem('initialBalance')) || 0;
let settingsPassword = localStorage.getItem('settingsPassword') || '0000';
let businessName = localStorage.getItem('businessName') || 'ClearScape';
let userName = localStorage.getItem('userName') || 'User';
let currency = localStorage.getItem('currency') || 'GBP';
let recurringTemplates = JSON.parse(localStorage.getItem('recurringTemplates')) || [];
let inactivityTimer;
let nextInvoiceNumber = parseInt(localStorage.getItem('nextInvoiceNumber')) || 1001;
let nextExpenseNumber = parseInt(localStorage.getItem('nextExpenseNumber')) || 501;
let securityQuestions = JSON.parse(localStorage.getItem('securityQuestions')) || [];
let companyDetails = JSON.parse(localStorage.getItem('companyDetails')) || { address: '', phone: '', email: '', website: '' };
let reminders = JSON.parse(localStorage.getItem('reminders')) || [];
let dashboardCardOrder = JSON.parse(localStorage.getItem('dashboardCardOrder')) || ['salesCard', 'outflowCard', 'balanceCard', 'arCard'];

const initialDefaultCategories = {
    Sales: ["Lawn Maintenance", "Hedge Trimming / Maintenance", "Landscaping", "Tree surgery / Felling", "Servicing / Repair", "Fencing", "Decking / Paving", "Other"],
    Expenses: ["Fuel", "Utilities", "Rent", "Services", "Materials", "Equipment", "Petty Cash", "Uniform / Safety Equipment", "Other"],
    Deposit: ["Loan", "Cash Injection", "Rebate / Refund", "Other"],
    Withdrawal: ["Cash Withdrawal", "Other"],
    Refund: ["Goodwill Gesture", "Job Cancellation / Amendment", "Other"],
    Other: []
};
let defaultCategories = JSON.parse(localStorage.getItem('userCategories')) || initialDefaultCategories;


// === ELEMENT SELECTORS ===
const appContainer = document.getElementById('appContainer');
const splashTitle = document.getElementById('splashTitle');
const appNameHeader = document.getElementById('appNameHeader');
const totalSalesEl = document.getElementById('totalSales');
const totalOutflowEl = document.getElementById('totalOutflow');
const outstandingBalanceEl = document.getElementById('outstandingBalance');
const totalOutstandingEl = document.getElementById('totalOutstanding');
const jobTypeSelect = document.getElementById('jobTypeSelect');
const transactionTypeSelect = document.getElementById('transactionTypeSelect');
const fullTransactionList = document.getElementById('fullTransactionList');


// === UTILITY & STATE MANAGEMENT ===
function formatCurrency(amount) {
    return Number(amount).toLocaleString('en-GB', {
        style: 'currency',
        currency: currency
    });
}
function saveTransactions() { localStorage.setItem('transactions', JSON.stringify(transactions)); }
function saveRecurringTemplates() { localStorage.setItem('recurringTemplates', JSON.stringify(recurringTemplates)); }
function saveClients() { localStorage.setItem('clients', JSON.stringify(clients)); }

function updateTransactionNumberDisplay() {
    const type = document.getElementById('transactionTypeSelect').value;
    const displayEl = document.getElementById('transactionNumberDisplay');
    if (type === 'Sale') {
        displayEl.value = `INV-${nextInvoiceNumber}`;
    } else if (type === 'Expense') {
        displayEl.value = `EXP-${nextExpenseNumber}`;
    } else {
        displayEl.value = 'N/A';
    }
}

function populateClientDatalist() {
    const datalist = document.getElementById('clientDatalist');
    if (!datalist) return;
    datalist.innerHTML = '';
    clients.forEach(client => {
        const option = document.createElement('option');
        option.value = client.name;
        datalist.appendChild(option);
    });
}

function updateJobTypeDropdown() {
    if (!jobTypeSelect || !transactionTypeSelect) return;
    const selectedType = transactionTypeSelect.value;
    let options = [];

    const currentTypeCategories = defaultCategories[selectedType + 's'] || defaultCategories[selectedType];
    
    if (currentTypeCategories) {
        options = currentTypeCategories;
    } else {
        options = defaultCategories.Other;
    }

    jobTypeSelect.innerHTML = '';
    options.forEach(cat => {
        const option = document.createElement('option');
        option.value = cat;
        option.textContent = cat;
        jobTypeSelect.appendChild(option);
    });
}


// === VIEW MANAGEMENT ===
function showView(viewId) {
    document.getElementById('splashScreen').style.display = 'none';
    document.getElementById('setupWizardView').style.display = 'none';
    document.getElementById('appContainer').style.display = 'none';

    if (viewId === 'splashScreen' || viewId === 'setupWizardView') {
        document.getElementById(viewId).style.display = 'flex';
    } else {
        appContainer.style.display = 'block';
        document.querySelectorAll('.app-view').forEach(view => {
            view.style.display = 'none';
        });
        const targetView = document.getElementById(viewId);
        if (targetView) {
            targetView.style.display = 'block';
        }
    }
}


// === SPLASH SCREEN & INACTIVITY ===
function resetInactivityTimer() {
    clearTimeout(inactivityTimer);
    inactivityTimer = setTimeout(() => {
        sessionStorage.removeItem('isLoggedIn');
        showSplashScreen();
    }, 5 * 60 * 1000);
}

function triggerLogoAnimation() {
    const appLogo = document.getElementById('appLogo');
    if (!appLogo || appLogo.classList.contains('logo-spin') || appLogo.classList.contains('logo-bounce')) return;
    const animations = ['logo-spin', 'logo-bounce'];
    const randomAnimation = animations[Math.floor(Math.random() * animations.length)];
    appLogo.classList.add(randomAnimation);
    setTimeout(() => { appLogo.classList.remove(randomAnimation); }, 1000);
}

function applySeasonalTheme() {
    const splashScreenEl = document.getElementById('splashScreen');
    if (!splashScreenEl) return;
    splashScreenEl.className = '';
    const today = new Date();
    const month = today.getMonth();
    const day = today.getDate();

    if (month === 11) { // December
        splashScreenEl.classList.add('theme-christmas');
    } else if (month === 9 && day >= 20) { // October 20th onwards
        splashScreenEl.classList.add('theme-halloween');
    }
}

function showSplashScreen() {
    showView('splashScreen');
    applySeasonalTheme();
    
    const hour = new Date().getHours();
    let timeOfDayGreeting;
    if (hour < 12) timeOfDayGreeting = `Good morning, ${userName}!`;
    else if (hour < 18) timeOfDayGreeting = `Good afternoon, ${userName}!`;
    else timeOfDayGreeting = `Good evening, ${userName}!`;
    
    if (splashTitle) splashTitle.textContent = timeOfDayGreeting;
    
    const factElement = document.getElementById('factOfTheDay');
    if (factElement) {
        const facts = [
            "The Ginkgo Biloba is one of the oldest living tree species, dating back 270 million years.",
            "Bamboo is the fastest-growing woody plant in the world; it can grow 35 inches in a single day.",
            "The Amazon Rainforest produces more than 20% of the world's oxygen.",
            "A sunflower's head is made of thousands of tiny flowers called florets.",
            "Oak trees don't produce acorns until they are around 50 years old.",
            "The smell of freshly cut grass is a plant distress call, releasing chemicals to attract beneficial insects.",
            "Broccoli is technically a flower.",
            "Strawberries are the only fruit with their seeds on the outside.",
            "The 'corpse flower', Amorphophallus titanum, has a bloom that smells like rotting flesh to attract pollinators.",
            "The art of trimming shrubs into ornamental shapes is called topiary.",
            "The gardens of Versailles in France are one of the most famous examples of the French formal garden style.",
            "Lancelot 'Capability' Brown was an 18th-century English landscape architect who designed over 170 parks, earning his nickname by telling clients their land had 'capability'.",
            "The floating gardens of Xochimilco in Mexico City are a UNESCO World Heritage site, based on ancient Aztec farming techniques.",
            "The baobab tree can store up to 120,000 litres of water in its trunk.",
            "The 'Angel Oak' in South Carolina is estimated to be 400-500 years old and provides more than 17,200 square feet of shade.",
            "The coast redwood (Sequoia sempervirens) is the tallest tree species in the world.",
            "Gertrude Jekyll was a highly influential British horticulturist and garden designer who created over 400 gardens in the UK, Europe, and America.",
            "Kew Gardens in London houses the largest and most diverse botanical and mycological collections in the world.",
            "The Venus flytrap is a carnivorous plant native only to a small region of North and South Carolina in the U.S.",
            "A single tree can absorb as much as 48 pounds of carbon dioxide per year.",
            "The Butchart Gardens in British Columbia, Canada, were created in an abandoned limestone quarry.",
            "The Wollemi pine, a 'living fossil', was thought to be extinct for millions of years until it was discovered in Australia in 1994.",
            "The practice of 'forest bathing' (shinrin-yoku) originated in Japan and involves simply being in and among trees for health benefits.",
            "The world's largest flower is the Rafflesia arnoldii, which can grow to be 3 feet across.",
            "André Le Nôtre, the principal gardener of King Louis XIV, designed the park of the Palace of Versailles.",
            "The ancient Hanging Gardens of Babylon are one of the Seven Wonders of the Ancient World, though their existence is still debated.",
            "The General Sherman Tree, a giant sequoia, is the world's largest tree by volume.",
            "Saffron, one of the most expensive spices, comes from the stigma of the crocus flower (Crocus sativus).",
            "Tulip bulbs were once more valuable than gold in 17th-century Holland during a period known as 'Tulip Mania'.",
            "The thorns on a rose are technically called 'prickles'.",
            "Vita Sackville-West and her husband Harold Nicolson created the famous Sissinghurst Castle Garden in Kent, England.",
            "The Huntington Botanical Gardens in California has one of the world's most extensive collections of cacti and succulents.",
            "The Japanese art of 'Kokedama' involves growing plants in a moss-covered ball of soil.",
            "The oldest-known living non-clonal organism is a bristlecone pine tree named Methuselah, over 4,850 years old.",
            "Claude Monet, the famous Impressionist painter, was also a dedicated gardener who designed his own garden at Giverny, France, which featured heavily in his paintings.",
            "The Banyan tree sends down roots from its branches that become new trunks.",
            "The leaves of the Mimosa pudica plant fold inward when touched.",
            "The Keukenhof Garden in the Netherlands is one of the world's largest flower gardens, famous for its millions of tulips.",
            "Roberto Burle Marx was a Brazilian landscape architect known for his modernist park and garden designs.",
            "The quaking aspen tree colony in Utah, named 'Pando', is considered one of the oldest and largest living organisms on Earth.",
            "Vanilla flavouring comes from the pod of an orchid, Vanilla planifolia.",
            "The Lost Gardens of Heligan in Cornwall, England, were rediscovered and restored after being neglected for decades after World War I.",
            "The practice of Bonsai originated in China before being further developed in Japan.",
            "The Joshua tree is actually a type of yucca plant.",
            "Frederick Law Olmsted is considered the father of American landscape architecture, famous for designing Central Park in New York City.",
            "The lotus flower is a sacred symbol in many Eastern cultures and can lie dormant for years during times of drought.",
            "The pitcher plant is a carnivorous plant that drowns its prey in a pool of digestive enzymes.",
            "The Eden Project in Cornwall, UK, features massive biomes that house plants collected from diverse climates and environments.",
            "The sap of the Dragon's Blood Tree is a dark red resin, hence its name.",
            "The Royal Botanic Garden in Edinburgh is Scotland's premier botanical institution.",
            "A 'ha-ha' is a recessed landscape design element that creates a barrier without interrupting a view.",
            "The saguaro cactus can live for over 150 years and doesn't grow its first 'arm' until it's around 75 years old.",
            "All parts of the oleander plant are poisonous.",
            "The cherry blossoms (sakura) of Japan are celebrated annually in festivals known as 'hanami'.",
            "The Monteverde Cloud Forest in Costa Rica is home to over 2,500 plant species."
        ];
        const randomFact = facts[Math.floor(Math.random() * facts.length)];
        factElement.textContent = randomFact;
    }
    
    const passwordContainer = document.getElementById('passwordLoginContainer');
    const menuContainer = document.getElementById('splashMenuContainer');

    if (sessionStorage.getItem('isLoggedIn') === 'true') {
        passwordContainer.classList.add('hidden');
        menuContainer.classList.remove('hidden');
    } else {
        passwordContainer.classList.remove('hidden');
        menuContainer.classList.add('hidden');
    }

    triggerLogoAnimation();
}


// === CORE FINANCIAL & RECURRING LOGIC ===
function generateRecurringTransactions() {
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    let newTransactionsCreated = false;
    recurringTemplates.forEach(template => {
        if (template.repetitionType === 'count' && template.repetitionsMade >= template.totalRepetitions) return;
        let lastDate = new Date(template.lastGeneratedDate);
        let nextDate = new Date(lastDate);
        const incrementDate = () => {
            if (template.frequency === 'Weekly') nextDate.setDate(nextDate.getDate() + 7);
            else if (template.frequency === 'Monthly') nextDate.setMonth(nextDate.getMonth() + 1);
            else if (template.frequency === 'Quarterly') nextDate.setMonth(nextDate.getMonth() + 3);
            else if (template.frequency === 'Yearly') nextDate.setFullYear(nextDate.getFullYear() + 1);
        };
        incrementDate();
        while (nextDate <= today) {
            if (template.repetitionType === 'count' && template.repetitionsMade >= template.totalRepetitions) break;
            const newTransaction = { ...template.sourceTransaction, id: `t_${Date.now()}_${Math.random()}`, date: nextDate.toISOString().split('T')[0], templateId: template.id };
            transactions.push(newTransaction);
            template.repetitionsMade++;
            newTransactionsCreated = true;
            lastDate = new Date(nextDate);
            incrementDate();
        }
        template.lastGeneratedDate = lastDate.toISOString().split('T')[0];
    });
    if (newTransactionsCreated) {
        saveTransactions();
        saveRecurringTemplates();
        sessionStorage.setItem('newRecurringGenerated', 'true');
    }
}

function updateDashboard() {
    const container = document.querySelector('#dashboardView .summary-cards-container');
    const cards = {};
    Array.from(container.children).forEach(card => {
        cards[card.id] = card;
    });
    container.innerHTML = '';
    dashboardCardOrder.forEach(cardId => {
        if (cards[cardId]) {
            container.appendChild(cards[cardId]);
        }
    });

    initialBalance = parseFloat(localStorage.getItem('initialBalance')) || 0;
    let totalSalesYTD = 0, totalOutflowYTD = 0, totalOutstandingAR = 0;
    let currentBalance = initialBalance;
    const currentYear = new Date().getFullYear();

    transactions.forEach(t => {
        const amountPaid = parseFloat(t.amountPaid) || 0;
        const amountDue = parseFloat(t.amountDue) || 0;
        
        if (['Sale', 'Deposit'].includes(t.type)) currentBalance += amountPaid;
        else currentBalance -= amountPaid;

        if (new Date(t.date).getFullYear() === currentYear) {
            if (['Sale', 'Deposit'].includes(t.type)) totalSalesYTD += amountPaid;
            else totalOutflowYTD += amountPaid;
        }
        if (t.type === 'Sale') totalOutstandingAR += (amountDue - amountPaid);
    });

    totalSalesEl.textContent = formatCurrency(totalSalesYTD);
    totalOutflowEl.textContent = formatCurrency(totalOutflowYTD);
    totalOutstandingEl.textContent = formatCurrency(totalOutstandingAR);
    outstandingBalanceEl.textContent = formatCurrency(currentBalance);

    document.querySelector('#salesCard .card-details').innerHTML = `<p><span class="detail-label">Transactions (YTD):</span> <span class="detail-value">${transactions.filter(t => t.type === 'Sale' && new Date(t.date).getFullYear() === currentYear).length}</span></p>`;
    document.querySelector('#outflowCard .card-details').innerHTML = `<p><span class="detail-label">Transactions (YTD):</span> <span class="detail-value">${transactions.filter(t => ['Expense', 'Withdrawal', 'Refund'].includes(t.type) && new Date(t.date).getFullYear() === currentYear).length}</span></p>`;
    document.querySelector('#balanceCard .card-details').innerHTML = `<p><span class="detail-label">Initial Balance:</span> <span class="detail-value">${formatCurrency(initialBalance)}</span></p>`;
    document.querySelector('#arCard .card-details').innerHTML = `<p><span class="detail-label">Overdue Invoices:</span> <span class="detail-value">${transactions.filter(t => t.type === 'Sale' && (t.amountDue - t.amountPaid > 0.01) && new Date(t.date) < new Date(new Date().setDate(new Date().getDate()-14))).length}</span></p>`;

    totalOutstandingEl.className = `amount ${totalOutstandingAR > 0.01 ? 'negative' : 'positive'}`;
    outstandingBalanceEl.className = `amount ${currentBalance >= 0 ? 'positive' : 'negative'}`;
    displaySmartInsights();
}

function renderFullTransactionList() {
    if (!fullTransactionList) return;
    const searchTerm = document.getElementById('transactionSearchInput').value.toLowerCase();
    const filterTypeValue = document.getElementById('filterTransactionType').value;
    const filterJobTypeValue = document.getElementById('filterJobType').value;
    const filterPaidStatusValue = document.getElementById('filterPaidStatus').value;
    const startDateValue = document.getElementById('filterStartDate').value;
    const endDateValue = document.getElementById('filterEndDate').value;
    
    fullTransactionList.innerHTML = '';
    
    const filtered = transactions.filter(t => {
        const matchesSearch = t.name.toLowerCase().includes(searchTerm) || (t.jobNotes && t.jobNotes.toLowerCase().includes(searchTerm));
        const matchesType = !filterTypeValue || t.type === filterTypeValue;
        const matchesJobType = !filterJobTypeValue || t.jobType === filterJobTypeValue;
        let matchesPaidStatus = true;
        if (filterPaidStatusValue === 'Outstanding') matchesPaidStatus = (parseFloat(t.amountDue) - parseFloat(t.amountPaid)) > 0.01;
        else if (filterPaidStatusValue === 'Paid') matchesPaidStatus = (parseFloat(t.amountDue) - parseFloat(t.amountPaid)) <= 0.01;
        const passesStartDate = !startDateValue || t.date >= startDateValue;
        const passesEndDate = !endDateValue || t.date <= endDateValue;
        return matchesSearch && matchesType && matchesJobType && matchesPaidStatus && passesStartDate && passesEndDate;
    }).sort((a, b) => new Date(b.date) - new Date(a.date));

    if (filtered.length === 0) {
        fullTransactionList.innerHTML = '<li>No transactions match your filters.</li>';
        return;
    }
    
    filtered.forEach(t => {
        const item = document.createElement('li');
        item.className = 'transaction-item';
        const outstanding = parseFloat(t.amountDue) - parseFloat(t.amountPaid);
        const isOutstandingSale = t.type === 'Sale' && outstanding > 0.01;

        let indicatorsHTML = '';
        if (t.templateId) {
            indicatorsHTML += `<span class="indicator-symbol" title="Recurring Transaction">🔄</span>`;
        }
        if (isOutstandingSale) {
            indicatorsHTML += `<span class="indicator-symbol" title="Outstanding Balance: ${formatCurrency(outstanding)}">⚠️</span>`;
        }
        
        let actionButtons = `<button class="action-btn edit-btn" data-id="${t.id}">Edit</button> <button class="action-btn delete-btn" data-id="${t.id}">Delete</button>`;
        if (t.type === 'Sale') {
            actionButtons = `<button class="action-btn pdf-btn" data-id="${t.id}">Create PDF</button>` + actionButtons;
        }
        if (isOutstandingSale) {
            actionButtons = `<button class="action-btn repay-btn" data-id="${t.id}">Record Full Payment</button>` + actionButtons;
        }

        item.innerHTML = `
            <div class="transaction-summary">
                <div class="transaction-name-cell">
                    <span class="transaction-name">${t.name}</span>
                    <span class="transaction-indicators">${indicatorsHTML}</span>
                </div>
                <span class="transaction-amount" style="color: ${['Sale','Deposit'].includes(t.type) ? 'var(--positive-color)' : 'var(--negative-color)'};">${formatCurrency(parseFloat(t.amountDue))}</span>
                <span class="transaction-date">${t.date}</span>
            </div>
            <div class="transaction-details">
                <p><strong>Number:</strong> ${t.transactionNumber || 'N/A'}</p>
                <p><strong>Type:</strong> ${t.type}</p><p><strong>Category:</strong> ${t.jobType}</p>
                <p><strong>Amount Paid:</strong> ${formatCurrency(parseFloat(t.amountPaid))}</p><p><strong>Outstanding:</strong> ${formatCurrency(outstanding)}</p>
                <p><strong>Notes:</strong> ${t.jobNotes || 'N/A'}</p>
                <div class="transaction-actions">${actionButtons}</div>
            </div>`;
            
        item.querySelector('.transaction-summary').addEventListener('click', e => {
            if (e.target.closest('button')) return;
            const details = item.querySelector('.transaction-details');
            details.style.display = details.style.display === 'block' ? 'none' : 'block';
        });
        
        fullTransactionList.appendChild(item);
    });
}


// === INSIGHTS & ANALYTICS ===
function displaySmartInsights() {
    const insightsListEl = document.getElementById('insightsList');
    if (!insightsListEl) return;
    insightsListEl.innerHTML = '';
    let insights = [];
    const insightGenerators = [generateUpcomingRemindersInsight, generateOverdueInsights, generateSpendingInsights, generateExpenseTrendInsight, generateTopServiceLastYear, generateTopClientInsight, generateUpcomingRecurringInsights, generateQuoteInsight];
    insightGenerators.forEach(generator => { generator(insights); });
    if (insights.length === 0) { insights.push({ type: 'quote', text: 'All clear! No special insights at the moment.' }); }
    insights.forEach(insight => {
        const li = document.createElement('li');
        li.className = `insight-${insight.type}`;
        li.innerHTML = insight.text;
        insightsListEl.appendChild(li);
    });
}

function generateUpcomingRemindersInsight(insights) {
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const todayString = today.toISOString().split('T')[0];
    const nextWeek = new Date();
    nextWeek.setDate(today.getDate() + 7);

    const todayReminders = reminders.filter(r => r.date === todayString);
    if (todayReminders.length > 0) {
        const reminderText = todayReminders.map(r => `"${r.text}"`).join(', ');
        insights.push({ type: 'info', text: `🗓️ **Reminder for Today:** ${reminderText}` });
    }

    const upcomingReminders = reminders.filter(r => {
        const reminderDate = new Date(r.date + 'T00:00:00');
        return reminderDate > today && reminderDate <= nextWeek;
    });

    if (upcomingReminders.length > 0) {
        const nextReminder = upcomingReminders.sort((a, b) => new Date(a.date) - new Date(b.date))[0];
        const reminderDate = new Date(nextReminder.date + 'T00:00:00');
        const dayName = reminderDate.toLocaleDateString('en-GB', { weekday: 'long' });
        insights.push({ type: 'info', text: `🗓️ **Coming up on ${dayName}:** "${nextReminder.text}"` });
    }
}

function generateExpenseTrendInsight(insights) {
    const today = new Date();
    const last30Days = new Date(); last30Days.setDate(today.getDate() - 30);
    const prior30Days = new Date(); prior30Days.setDate(today.getDate() - 60);
    let expensesLast30 = 0; let expensesPrior30 = 0;
    transactions.forEach(t => {
        if (['Expense', 'Withdrawal'].includes(t.type)) {
            const transactionDate = new Date(t.date); const amount = parseFloat(t.amountPaid);
            if (transactionDate >= last30Days && transactionDate <= today) { expensesLast30 += amount; }
            else if (transactionDate >= prior30Days && transactionDate < last30Days) { expensesPrior30 += amount; }
        }
    });
    if (expensesLast30 > 0 && expensesPrior30 > 0) {
        const percentageChange = ((expensesLast30 - expensesPrior30) / expensesPrior30) * 100;
        if (percentageChange > 10) { insights.push({ type: 'warning', text: `📈 Expenses have risen by ${percentageChange.toFixed(0)}% in the last 30 days.` }); }
        else if (percentageChange < -10) { insights.push({ type: 'good', text: `📉 Good job! Expenses have fallen by ${Math.abs(percentageChange).toFixed(0)}% in the last 30 days.` }); }
    }
}

function generateTopServiceLastYear(insights) {
    const lastYear = new Date().getFullYear() - 1;
    const salesLastYear = transactions.filter(t => t.type === 'Sale' && new Date(t.date).getFullYear() === lastYear);
    if (salesLastYear.length > 0) {
        const revenueByCategory = {};
        salesLastYear.forEach(t => { revenueByCategory[t.jobType] = (revenueByCategory[t.jobType] || 0) + parseFloat(t.amountDue); });
        let topService = ''; let maxRevenue = 0;
        for (const category in revenueByCategory) {
            if (revenueByCategory[category] > maxRevenue) { maxRevenue = revenueByCategory[category]; topService = category; }
        }
        if (topService) { insights.push({ type: 'info', text: `🏆 Last year, your most profitable service was **${topService}**.` }); }
    }
}

function generateTopClientInsight(insights) {
    const thisYear = new Date().getFullYear();
    const salesThisYear = transactions.filter(t => t.type === 'Sale' && new Date(t.date).getFullYear() === thisYear);
    if (salesThisYear.length > 0) {
        const revenueByClient = {};
        salesThisYear.forEach(t => { revenueByClient[t.name] = (revenueByClient[t.name] || 0) + parseFloat(t.amountPaid); });
        let topClient = ''; let maxRevenue = 0;
        for(const client in revenueByClient){ if(revenueByClient[client] > maxRevenue){ maxRevenue = revenueByClient[client]; topClient = client; } }
        if (topClient) { insights.push({ type: 'info', text: `⭐ Your top client so far this year is **${topClient}**, contributing ${formatCurrency(maxRevenue)}.` }); }
    }
}

function generateOverdueInsights(insights) {
    const fourteenDaysAgo = new Date(); fourteenDaysAgo.setDate(fourteenDaysAgo.getDate() - 14);
    let overdueAmount = 0, overdueCount = 0;
    transactions.forEach(t => {
        if (t.type === 'Sale' && (parseFloat(t.amountDue) - parseFloat(t.amountPaid)) > 0 && new Date(t.date) < fourteenDaysAgo) {
            overdueAmount += (parseFloat(t.amountDue) - parseFloat(t.amountPaid)); overdueCount++;
        }
    });
    if (overdueCount > 0) { insights.push({ type: 'warning', text: `⚠️ You have ${formatCurrency(overdueAmount)} from ${overdueCount} transaction(s) overdue by more than 14 days.` }); }
}

function generateUpcomingRecurringInsights(insights) {
    const today = new Date(), nextWeek = new Date(); nextWeek.setDate(today.getDate() + 7);
    recurringTemplates.forEach(template => {
        if (template.repetitionType === 'count' && template.repetitionsMade >= template.totalRepetitions) return;
        let nextDueDate = new Date(template.lastGeneratedDate);
        if (template.frequency === 'Weekly') nextDueDate.setDate(nextDueDate.getDate() + 7);
        else if (template.frequency === 'Monthly') nextDueDate.setMonth(nextDueDate.getMonth() + 1);
        else if (template.frequency === 'Quarterly') nextDueDate.setMonth(nextDueDate.getMonth() + 3);
        else if (template.frequency === 'Yearly') nextDueDate.setFullYear(nextDueDate.getFullYear() + 1);
        if (nextDueDate > today && nextDueDate <= nextWeek) { insights.push({ type: 'info', text: `🗓️ Reminder: A recurring transaction for "${template.sourceTransaction.name}" is due soon.` }); }
    });
}

function generateSpendingInsights(insights) {
    const today = new Date(), currentMonth = today.getMonth(), currentYear = today.getFullYear();
    const expenseByCategory = {};
    transactions.forEach(t => {
        const tDate = new Date(t.date);
        if (['Expense', 'Withdrawal', 'Refund'].includes(t.type) && tDate.getMonth() === currentMonth && tDate.getFullYear() === currentYear) {
            const category = t.jobType;
            if (!expenseByCategory[category]) expenseByCategory[category] = 0;
            expenseByCategory[category] += parseFloat(t.amountPaid);
        }
    });
    let topCategory = '', topAmount = 0;
    for (const category in expenseByCategory) { if (expenseByCategory[category] > topAmount) { topAmount = expenseByCategory[category]; topCategory = category; } }
    if (topCategory) { insights.push({ type: 'info', text: `💸 Your top expense category this month is "**${topCategory}**" with ${formatCurrency(topAmount)} spent.` }); }
}

function generateQuoteInsight(insights) {
    const quotes = ["The secret of getting ahead is getting started.", "An investment in knowledge pays the best interest.", "Beware of little expenses. A small leak will sink a great ship.", "Success is not final; failure is not fatal: It is the courage to continue that counts."];
    insights.push({ type: 'quote', text: `💡 "${quotes[Math.floor(Math.random() * quotes.length)]}"` });
}

let monthlyChartInstance, yearlyTrendChartInstance, monthlyBarChartInstance, expenseDoughnutChartInstance;

function renderAnalyticsPage(year) {
    const analyticsYearSelect = document.getElementById('analyticsYearSelect');
    if (!analyticsYearSelect) return;
    const years = [...new Set(transactions.map(t => new Date(t.date).getFullYear()))].sort((a, b) => b - a);
    if (years.length === 0) years.push(new Date().getFullYear());
    analyticsYearSelect.innerHTML = years.map(y => `<option value="${y}">${y}</option>`).join('');
    if (year) analyticsYearSelect.value = year;
    const selectedYear = parseInt(year || analyticsYearSelect.value);
    const yearData = processDataForYear(selectedYear);
    document.getElementById('analyticsTotalRevenue').textContent = formatCurrency(yearData.totalRevenue);
    document.getElementById('analyticsTotalExpenses').textContent = formatCurrency(yearData.totalExpenses);
    const netProfitEl = document.getElementById('analyticsNetProfit');
    netProfitEl.textContent = formatCurrency(yearData.netProfit);
    netProfitEl.className = `amount ${yearData.netProfit >= 0 ? 'positive' : 'negative'}`;
    createMonthlyChart(yearData.actualSales, yearData.actualExpenses, yearData.projectedSales, yearData.projectedExpenses);
}

function processDataForYear(year) {
    const actualSales = Array(12).fill(0), actualExpenses = Array(12).fill(0);
    const projectedSales = Array(12).fill(0), projectedExpenses = Array(12).fill(0);
    const today = new Date();
    transactions.forEach(t => {
        const transactionDate = new Date(t.date);
        if (transactionDate.getFullYear() === year) {
            const month = transactionDate.getMonth();
            const amount = parseFloat(t.amountPaid);
            if (['Sale', 'Deposit'].includes(t.type)) actualSales[month] += amount;
            else if (['Expense', 'Withdrawal', 'Refund'].includes(t.type)) actualExpenses[month] += amount;
        }
    });
    recurringTemplates.forEach(template => {
        let nextDate = new Date(template.lastGeneratedDate);
        let repsMade = template.repetitionsMade;
        while (nextDate.getFullYear() <= year) {
            if (template.frequency === 'Weekly') nextDate.setDate(nextDate.getDate() + 7);
            else if (template.frequency === 'Monthly') nextDate.setMonth(nextDate.getMonth() + 1);
            else if (template.frequency === 'Quarterly') nextDate.setMonth(nextDate.getMonth() + 3);
            else if (template.frequency === 'Yearly') nextDate.setFullYear(nextDate.getFullYear() + 1);
            if (nextDate > today && nextDate.getFullYear() === year && (template.repetitionType === 'forever' || repsMade < template.totalRepetitions)) {
                const month = nextDate.getMonth();
                const amount = parseFloat(template.sourceTransaction.amountDue);
                if (['Sale', 'Deposit'].includes(template.sourceTransaction.type)) projectedSales[month] += amount;
                else if (['Expense', 'Withdrawal', 'Refund'].includes(template.sourceTransaction.type)) projectedExpenses[month] += amount;
                repsMade++;
            }
        }
    });
    const totalRevenue = actualSales.reduce((s, v) => s + v, 0);
    const totalExpenses = actualExpenses.reduce((s, v) => s + v, 0);
    return { actualSales, actualExpenses, projectedSales, projectedExpenses, totalRevenue, totalExpenses, netProfit: totalRevenue - totalExpenses };
}

function createMonthlyChart(actualSalesData, actualExpenseData, projectedSalesData, projectedExpenseData) {
    const ctx = document.getElementById('monthlyChart').getContext('2d');
    if (monthlyChartInstance) monthlyChartInstance.destroy();
    monthlyChartInstance = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
            datasets: [
                { label: 'Actual Revenue', data: actualSalesData, backgroundColor: 'rgba(76, 175, 80, 0.8)', stack: 'revenue' },
                { label: 'Projected Revenue', data: projectedSalesData, backgroundColor: 'rgba(76, 175, 80, 0.4)', stack: 'revenue' },
                { label: 'Actual Expenses', data: actualExpenseData, backgroundColor: 'rgba(244, 67, 54, 0.8)', stack: 'expenses' },
                { label: 'Projected Expenses', data: projectedExpenseData, backgroundColor: 'rgba(244, 67, 54, 0.4)', stack: 'expenses' }
            ]
        },
        options: { responsive: true, maintainAspectRatio: false, scales: { x: { stacked: true }, y: { stacked: true, beginAtZero: true, ticks: { callback: value => formatCurrency(value) } } }, plugins: { tooltip: { mode: 'index' } } }
    });
}

function renderSmartAnalysisPage() {
    calculateAndDisplayKPIs();
    createYearlyTrendChart();
    populateMonthlyDeepDiveFilters();
    const year = document.getElementById('monthlyDeepDiveYearSelect').value;
    const month = document.getElementById('monthlyDeepDiveMonthSelect').value;
    createMonthlyBarChart(year, month);
    createExpenseDoughnutChart(year, month);
    renderClientLeaderboard();
    document.getElementById('monthlyDeepDiveYearSelect').addEventListener('change', updateMonthlyCharts);
    document.getElementById('monthlyDeepDiveMonthSelect').addEventListener('change', updateMonthlyCharts);
}

function updateMonthlyCharts() {
    const year = document.getElementById('monthlyDeepDiveYearSelect').value;
    const month = document.getElementById('monthlyDeepDiveMonthSelect').value;
    createMonthlyBarChart(year, month);
    createExpenseDoughnutChart(year, month);
    document.getElementById('expenseBreakdownTitle').textContent = `For ${document.getElementById('monthlyDeepDiveMonthSelect').options[document.getElementById('monthlyDeepDiveMonthSelect').selectedIndex].text} ${year}`;
}

function calculateAndDisplayKPIs() {
    const thisYear = new Date().getFullYear();
    const yearlyData = processDataForYear(thisYear);
    const monthlyVolumes = Array(12).fill(0);
    transactions.forEach(t => { const d = new Date(t.date); if (d.getFullYear() === thisYear) { monthlyVolumes[d.getMonth()]++; } });
    const maxVolume = Math.max(...monthlyVolumes);
    const busiestMonthIndex = monthlyVolumes.indexOf(maxVolume);
    const monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
    document.getElementById('kpiBusiestMonth').textContent = monthNames[busiestMonthIndex];
    document.querySelector('#kpiBusiestMonth').closest('.summary-card').querySelector('.card-details').innerHTML = `<p><span class="detail-label">Transactions:</span> <span class="detail-value">${maxVolume}</span></p>`;
    const salesThisYear = transactions.filter(t => t.type === 'Sale' && new Date(t.date).getFullYear() === thisYear);
    const totalSaleValue = salesThisYear.reduce((sum, t) => sum + parseFloat(t.amountDue), 0);
    const avgSaleValue = salesThisYear.length > 0 ? totalSaleValue / salesThisYear.length : 0;
    document.getElementById('kpiAvgSaleValue').textContent = formatCurrency(avgSaleValue);
    document.querySelector('#kpiAvgSaleValue').closest('.summary-card').querySelector('.card-details').innerHTML = `<p><span class="detail-label">Total Sales Value:</span> <span class="detail-value">${formatCurrency(totalSaleValue)}</span></p>`;
    const expensesThisYear = transactions.filter(t => ['Expense', 'Withdrawal'].includes(t.type) && new Date(t.date).getFullYear() === thisYear);
    const expenseCategories = {};
    expensesThisYear.forEach(t => { expenseCategories[t.jobType] = (expenseCategories[t.jobType] || 0) + parseFloat(t.amountPaid); });
    let topExpenseCat = '--'; let maxExpense = 0;
    for (const cat in expenseCategories) { if (expenseCategories[cat] > maxExpense) { maxExpense = expenseCategories[cat]; topExpenseCat = cat; } }
    document.getElementById('kpiTopExpense').textContent = topExpenseCat;
    document.querySelector('#kpiTopExpense').closest('.summary-card').querySelector('.card-details').innerHTML = `<p><span class="detail-label">Amount Spent:</span> <span class="detail-value">${formatCurrency(maxExpense)}</span></p>`;
    const profitMargin = yearlyData.totalRevenue > 0 ? ((yearlyData.netProfit / yearlyData.totalRevenue) * 100).toFixed(1) : 0;
    document.getElementById('kpiProfitMargin').textContent = `${profitMargin}%`;
    document.getElementById('kpiProfitMargin').style.color = profitMargin >= 0 ? 'var(--positive-color)' : 'var(--negative-color)';
    document.querySelector('#kpiProfitMargin').closest('.summary-card').querySelector('.card-details').innerHTML = `<p><span class="detail-label">Net Profit (YTD):</span> <span class="detail-value">${formatCurrency(yearlyData.netProfit)}</span></p>`;
}

function createYearlyTrendChart() {
    const ctx = document.getElementById('yearlyTrendChart').getContext('2d');
    if (yearlyTrendChartInstance) yearlyTrendChartInstance.destroy();
    const years = [...new Set(transactions.map(t => new Date(t.date).getFullYear()))].sort();
    if(years.length === 0) years.push(new Date().getFullYear());
    const yearlyData = years.map(year => processDataForYear(year));
    yearlyTrendChartInstance = new Chart(ctx, {
        type: 'line',
        data: {
            labels: years,
            datasets: [
                { label: 'Total Revenue', data: yearlyData.map(d => d.totalRevenue), borderColor: 'rgba(76, 175, 80, 1)', backgroundColor: 'rgba(76, 175, 80, 0.2)', fill: true, tension: 0.1 },
                { label: 'Total Expenses', data: yearlyData.map(d => d.totalExpenses), borderColor: 'rgba(244, 67, 54, 1)', backgroundColor: 'rgba(244, 67, 54, 0.2)', fill: true, tension: 0.1 },
                { label: 'Net Profit', data: yearlyData.map(d => d.netProfit), borderColor: 'rgba(0, 123, 255, 1)', backgroundColor: 'rgba(0, 123, 255, 0.2)', fill: true, tension: 0.1 }
            ]
        },
        options: { responsive: true, maintainAspectRatio: false, scales: { y: { beginAtZero: true } } }
    });
}

function populateMonthlyDeepDiveFilters() {
    const yearSelect = document.getElementById('monthlyDeepDiveYearSelect');
    const monthSelect = document.getElementById('monthlyDeepDiveMonthSelect');
    const years = [...new Set(transactions.map(t => new Date(t.date).getFullYear()))].sort((a, b) => b - a);
    if(years.length === 0) years.push(new Date().getFullYear());
    yearSelect.innerHTML = years.map(y => `<option value="${y}">${y}</option>`).join('');
    const monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
    monthSelect.innerHTML = monthNames.map((m, i) => `<option value="${i}">${m}</option>`).join('');
    const today = new Date();
    yearSelect.value = today.getFullYear();
    monthSelect.value = today.getMonth();
}

function createMonthlyBarChart(year, month) {
    const ctx = document.getElementById('monthlyBarChart').getContext('2d');
    if (monthlyBarChartInstance) monthlyBarChartInstance.destroy();
    const monthlyTransactions = transactions.filter(t => { const d = new Date(t.date); return d.getFullYear() == year && d.getMonth() == month; });
    const incomeByType = {}; const expensesByType = {};
    monthlyTransactions.forEach(t => {
        const amount = parseFloat(t.amountPaid);
        if(['Sale', 'Deposit'].includes(t.type)) { incomeByType[t.jobType] = (incomeByType[t.jobType] || 0) + amount; }
        else { expensesByType[t.jobType] = (expensesByType[t.jobType] || 0) + amount; }
    });
    const labels = [...new Set([...Object.keys(incomeByType), ...Object.keys(expensesByType)])];
    monthlyBarChartInstance = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: labels,
            datasets: [ { label: 'Income', data: labels.map(l => incomeByType[l] || 0), backgroundColor: 'rgba(76, 175, 80, 0.8)' }, { label: 'Expense', data: labels.map(l => expensesByType[l] || 0), backgroundColor: 'rgba(244, 67, 54, 0.8)' } ]
        },
        options: { responsive: true, maintainAspectRatio: false, scales: { x: { stacked: true }, y: { stacked: true, beginAtZero: true } } }
    });
}

function createExpenseDoughnutChart(year, month) {
    const ctx = document.getElementById('expenseDoughnutChart').getContext('2d');
    if (expenseDoughnutChartInstance) expenseDoughnutChartInstance.destroy();
    const monthlyExpenses = transactions.filter(t => { const d = new Date(t.date); return d.getFullYear() == year && d.getMonth() == month && ['Expense', 'Withdrawal', 'Refund'].includes(t.type); });
    const expenseByCategory = {};
    monthlyExpenses.forEach(t => { expenseByCategory[t.jobType] = (expenseByCategory[t.jobType] || 0) + parseFloat(t.amountPaid); });
    const labels = Object.keys(expenseByCategory);
    const data = Object.values(expenseByCategory);
    if (labels.length === 0) {
        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
        ctx.font = "16px Arial"; ctx.fillStyle = "#888"; ctx.textAlign = "center";
        ctx.fillText("No expense data for this month.", ctx.canvas.width / 2, ctx.canvas.height / 2);
        return;
    }
    expenseDoughnutChartInstance = new Chart(ctx, {
        type: 'doughnut',
        data: { labels: labels, datasets: [{ label: 'Expenses', data: data, backgroundColor: ['#f44336', '#ff9800', '#ffc107', '#8bc34a', '#009688', '#03a9f4', '#3f51b5', '#9c27b0'], hoverOffset: 4 }] },
        options: { responsive: true, maintainAspectRatio: false, plugins: { legend: { position: 'top' } } }
    });
}

function renderClientLeaderboard() {
    const list = document.getElementById('clientLeaderboardList');
    list.innerHTML = '';
    const thisYear = new Date().getFullYear();
    const clientRevenue = {};
    transactions.forEach(t => { if (t.type === 'Sale' && new Date(t.date).getFullYear() === thisYear) { clientRevenue[t.name] = (clientRevenue[t.name] || 0) + parseFloat(t.amountPaid); } });
    const sortedClients = Object.entries(clientRevenue).sort(([,a],[,b]) => b-a).slice(0, 5);
    if (sortedClients.length === 0) { list.innerHTML = '<li>No client sales recorded this year.</li>'; return; }
    list.innerHTML = sortedClients.map(([name, revenue]) => `<li><span class="client-name">${name}</span><span class="client-revenue">${formatCurrency(revenue)}</span></li>`).join('');
}

function generatePdf(transactionId) {
    const transaction = transactions.find(t => t.id === transactionId);
    if (!transaction) return alert('Transaction not found.');
    const { jsPDF } = window.jspdf;
    const invoiceContainer = document.getElementById('invoice-container');
    document.getElementById('invoice-business-name').textContent = businessName;
    const details = companyDetails.address + '\n' + companyDetails.phone + '\n' + companyDetails.email;
    document.getElementById('invoice-company-details').textContent = details;
    document.getElementById('invoice-title').textContent = 'INVOICE';
    document.getElementById('invoice-number').textContent = transaction.transactionNumber || 'N/A';
    document.getElementById('invoice-date').textContent = new Date(transaction.date).toLocaleDateString('en-GB');
    document.getElementById('invoice-client-name').textContent = transaction.name;
    document.getElementById('invoice-items').innerHTML = `<tr><td style="padding: 10px; border-bottom: 1px solid #eee;">${transaction.jobType}</td><td style="padding: 10px; text-align: right; border-bottom: 1px solid #eee;">${formatCurrency(transaction.amountDue)}</td></tr>`;
    const balanceDue = transaction.amountDue - transaction.amountPaid;
    document.getElementById('invoice-amount-due').textContent = formatCurrency(transaction.amountDue);
    document.getElementById('invoice-amount-paid').textContent = formatCurrency(transaction.amountPaid);
    document.getElementById('invoice-balance-due').textContent = formatCurrency(balanceDue);
    document.getElementById('invoice-notes').textContent = transaction.jobNotes || 'Thank you for your business!';
    
    const logoImg = document.getElementById('invoice-logo');
    if (logoImg && !logoImg.complete) {
        logoImg.onload = () => captureInvoice();
        logoImg.onerror = () => { console.warn("Logo image failed to load, proceeding without it."); captureInvoice(); };
    } else {
        captureInvoice();
    }
    function captureInvoice() {
        html2canvas(invoiceContainer, { scale: 2 }).then(canvas => {
            const imgData = canvas.toDataURL('image/png');
            const pdf = new jsPDF('p', 'mm', 'a4');
            const pdfWidth = pdf.internal.pageSize.getWidth();
            const pdfHeight = (canvas.height * pdfWidth) / canvas.width;
            pdf.addImage(imgData, 'PNG', 0, 0, pdfWidth, pdfHeight);
            pdf.output('dataurlnewwindow');
        });
    }
}


// === INITIALIZATION & SETUP WIZARD ===
function initApp() {
    resetInactivityTimer();
    generateRecurringTransactions();
    if (localStorage.getItem('setupComplete') !== 'true') {
        showView('setupWizardView');
        showSetupStep(1);
        return false;
    }
    userName = localStorage.getItem('userName') || 'User';
    businessName = localStorage.getItem('businessName') || 'ClearScape';
    currency = localStorage.getItem('currency') || 'GBP';
    companyDetails = JSON.parse(localStorage.getItem('companyDetails')) || { address: '', phone: '', email: '', website: '' };
    appNameHeader.textContent = `${businessName} Dashboard`;
    document.title = `${businessName} Tracker`;
    clients = JSON.parse(localStorage.getItem('clients')) || [];
    updateJobTypeDropdown();
    populateClientDatalist();
    updateTransactionNumberDisplay();
    return true;
}

let currentSetupStep = 1;
function showSetupStep(stepNumber) {
    document.querySelectorAll('.setup-step').forEach(step => step.style.display = 'none');
    const stepName = getStepName(stepNumber);
    if (stepName) document.getElementById(`step${stepName}`).style.display = 'block';
}

function getStepName(stepNumber) {
    const steps = [null, 'Name', 'BusinessName', 'CompanyDetails', 'Currency', 'Password', 'Security', 'Balance', 'Categories'];
    return steps[stepNumber] || null;
}

function renderWizardCategoryList() {
    const list = document.getElementById('categoryWizardList');
    if (!list) return;
    list.innerHTML = '';
    for (const type in defaultCategories) {
        if (defaultCategories.hasOwnProperty(type) && defaultCategories[type].length > 0) {
            const typeHeader = document.createElement('h5');
            typeHeader.textContent = type;
            typeHeader.style.cssText = 'text-align: left; margin-top: 15px; padding-bottom: 5px; border-bottom: 1px solid #ccc;';
            list.appendChild(typeHeader);
            const subList = document.createElement('ul');
            subList.style.cssText = 'list-style: none; padding-left: 10px;';
            defaultCategories[type].forEach(cat => {
                const li = document.createElement('li');
                li.textContent = cat;
                li.style.textAlign = 'left';
                li.style.padding = '5px 0';
                subList.appendChild(li);
            });
            list.appendChild(subList);
        }
    }
    document.getElementById('finishSetupBtn').disabled = false;
}

let navDate = new Date();
let selectedDate = new Date().toISOString().split('T')[0];

function renderCalendarPage() {
    renderCalendar(navDate);
    renderReminders(selectedDate);
}

function renderCalendar(date) {
    const month = date.getMonth();
    const year = date.getFullYear();
    document.getElementById('monthAndYear').textContent = `${date.toLocaleString('default', { month: 'long' })} ${year}`;
    const calendarDaysEl = document.getElementById('calendar-days');
    calendarDaysEl.innerHTML = '';
    const firstDayOfMonth = new Date(year, month, 1).getDay();
    const daysInMonth = new Date(year, month + 1, 0).getDate();
    for (let i = 0; i < firstDayOfMonth; i++) { calendarDaysEl.innerHTML += `<div class="day"></div>`; }
    for (let i = 1; i <= daysInMonth; i++) {
        const dayEl = document.createElement('div');
        dayEl.className = 'day';
        dayEl.textContent = i;
        const dayDate = new Date(year, month, i);
        const dayDateString = dayDate.toISOString().split('T')[0];
        if (dayDateString === new Date().toISOString().split('T')[0]) { dayEl.classList.add('is-today'); }
        if (dayDateString === selectedDate) { dayEl.classList.add('is-selected'); }
        if (reminders.some(r => r.date === dayDateString)) { dayEl.classList.add('has-reminder'); }
        dayEl.addEventListener('click', () => { selectedDate = dayDateString; renderCalendar(navDate); renderReminders(selectedDate); });
        calendarDaysEl.appendChild(dayEl);
    }
}

function renderReminders(dateString) {
    const date = new Date(dateString);
    const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
    document.getElementById('selectedDateHeader').textContent = date.toLocaleDateString('en-GB', options);
    document.getElementById('reminderDate').value = dateString;
    const reminderListEl = document.getElementById('reminderList');
    reminderListEl.innerHTML = '';
    const dayReminders = reminders.filter(r => r.date === dateString);
    if (dayReminders.length === 0) { reminderListEl.innerHTML = '<li>No reminders for this day.</li>'; return; }
    dayReminders.forEach(reminder => {
        const li = document.createElement('li');
        li.textContent = reminder.text;
        const deleteBtn = document.createElement('button');
        deleteBtn.innerHTML = '&times;';
        deleteBtn.className = 'delete-reminder-btn';
        deleteBtn.onclick = () => { deleteReminder(reminder.id); };
        li.appendChild(deleteBtn);
        reminderListEl.appendChild(li);
    });
}

function saveReminders() { localStorage.setItem('reminders', JSON.stringify(reminders)); }

function deleteReminder(id) {
    reminders = reminders.filter(r => r.id !== id);
    saveReminders();
    renderCalendar(navDate);
    renderReminders(selectedDate);
}

// === INITIAL LOAD & EVENT LISTENERS ===
document.addEventListener('DOMContentLoaded', () => {
    showSplashScreen();
    ['mousemove', 'mousedown', 'keydown', 'touchstart', 'scroll'].forEach(event => document.addEventListener(event, resetInactivityTimer));
    setInterval(triggerLogoAnimation, 6000);

    document.getElementById('loginBtn').addEventListener('click', () => {
        const passwordInput = document.getElementById('splashPasswordInput');
        const enteredPassword = passwordInput.value;
        const savedPassword = localStorage.getItem('settingsPassword') || '0000';
        if (enteredPassword === savedPassword) {
            sessionStorage.setItem('isLoggedIn', 'true');
            document.getElementById('passwordLoginContainer').classList.add('hidden');
            document.getElementById('splashMenuContainer').classList.remove('hidden');
            passwordInput.value = '';
        } else {
            alert('Incorrect password. Please try again.');
            passwordInput.value = '';
        }
    });
    
    // Main Navigation
    document.getElementById('goToDashboardBtn').addEventListener('click', () => { if (initApp()) { showView('dashboardView'); updateDashboard(); } });
    document.getElementById('goToTransactionsBtn').addEventListener('click', () => { if (initApp()) { showView('transactionListView'); renderFullTransactionList(); } });
    document.getElementById('goToSmartAnalysisBtn').addEventListener('click', () => { if (initApp()) { renderSmartAnalysisPage(); showView('smartAnalysisView'); } });
    document.getElementById('goToCalendarBtn').addEventListener('click', () => { if (initApp()) { renderCalendarPage(); showView('calendarView'); } });
    document.getElementById('goToSettingsBtn').addEventListener('click', () => { if (initApp()) { showView('settingsView'); populateSettingsPage(); } });
    document.getElementById('headerTransactionsBtn').addEventListener('click', () => { showView('transactionListView'); renderFullTransactionList(); });
    document.getElementById('headerAnalyticsBtn').addEventListener('click', () => { renderAnalyticsPage(); showView('analyticsView'); });
    document.getElementById('headerSmartAnalysisBtn').addEventListener('click', () => { renderSmartAnalysisPage(); showView('smartAnalysisView'); });
    document.getElementById('headerCalendarBtn').addEventListener('click', () => { renderCalendarPage(); showView('calendarView'); });
    document.getElementById('headerSettingsBtn').addEventListener('click', () => { showView('settingsView'); populateSettingsPage(); });
    document.getElementById('viewSplashBtn').addEventListener('click', showSplashScreen);
    
    // Back Buttons
    ['backToDashboardBtn', 'backToDashboardFromSettingsBtn', 'backToDashboardFromAnalyticsBtn', 'backToDashboardFromSmartAnalysisBtn', 'backToDashboardFromCalendarBtn'].forEach(id => {
        const btn = document.getElementById(id);
        if(btn) btn.addEventListener('click', () => showView('dashboardView'));
    });
    
    // Interactive Dashboard Card
    document.getElementById('arCard').addEventListener('click', () => {
        document.getElementById('filterPaidStatus').value = 'Outstanding';
        renderFullTransactionList();
        showView('transactionListView');
    });

    // Transaction Form UI
    document.getElementById('amountDueInput').addEventListener('input', (e) => { document.getElementById('amountPaidInput').value = e.target.value; });
    document.getElementById('transactionTypeSelect').addEventListener('change', () => { updateJobTypeDropdown(); toggleAmountPaidVisibility(); updateTransactionNumberDisplay(); });
    document.getElementById('isRecurringCheckbox').addEventListener('change', (e) => { document.getElementById('recurringOptions').style.display = e.target.checked ? 'block' : 'none'; });
    document.querySelectorAll('input[name="repeatOption"]').forEach(radio => { radio.addEventListener('change', (e) => { document.getElementById('repetitionCount').disabled = e.target.value !== 'count'; }); });

    function toggleAmountPaidVisibility() {
        const transactionType = document.getElementById('transactionTypeSelect').value;
        document.getElementById('amountPaidGroup').style.display = transactionType === 'Sale' ? 'block' : 'none';
    }
    
    // Main Transaction Form Submit
    document.getElementById('transactionForm').addEventListener('submit', function(e) {
        e.preventDefault();
        const transactionId = document.getElementById('transactionId').value;
        const submitBtn = document.getElementById('addTransactionBtn');
        const isRecurring = document.getElementById('isRecurringCheckbox').checked;
        const transactionData = {
            date: document.getElementById('transactionDate').value, name: document.getElementById('transactionName').value.trim(),
            type: document.getElementById('transactionTypeSelect').value, jobType: document.getElementById('jobTypeSelect').value,
            amountDue: parseFloat(document.getElementById('amountDueInput').value) || 0,
            jobNotes: document.getElementById('jobNotesInput').value.trim(), transactionNumber: null
        };
        if (transactionData.type === 'Sale') { transactionData.amountPaid = parseFloat(document.getElementById('amountPaidInput').value) || 0; }
        else { transactionData.amountPaid = transactionData.amountDue; }
        if (!transactionData.date || !transactionData.name || !transactionData.amountDue) return alert('Please fill out Date, Name, and Amount Due.');
        submitBtn.disabled = true; submitBtn.textContent = 'Saving...';
        setTimeout(() => {
            if (transactionId) {
                const index = transactions.findIndex(t => t.id === transactionId);
                if (index > -1) {
                    transactionData.transactionNumber = transactions[index].transactionNumber;
                    transactions[index] = { ...transactions[index], ...transactionData };
                }
            } else {
                transactionData.id = `t_${Date.now()}`;
                if (transactionData.type === 'Sale') {
                    transactionData.transactionNumber = `INV-${nextInvoiceNumber}`;
                    nextInvoiceNumber++;
                    localStorage.setItem('nextInvoiceNumber', nextInvoiceNumber);
                } else if (transactionData.type === 'Expense') {
                    transactionData.transactionNumber = `EXP-${nextExpenseNumber}`;
                    nextExpenseNumber++;
                    localStorage.setItem('nextExpenseNumber', nextExpenseNumber);
                }
                if (isRecurring) { /* recurring logic */ }
                transactions.push(transactionData);
            }
            saveTransactions(); updateDashboard(); renderFullTransactionList();
            submitBtn.style.backgroundColor = 'var(--positive-color)'; submitBtn.textContent = '✓ Saved!';
            setTimeout(() => {
                this.reset();
                document.getElementById('transactionId').value = '';
                submitBtn.textContent = 'Add Transaction';
                submitBtn.disabled = false;
                submitBtn.style.backgroundColor = '';
                updateJobTypeDropdown();
                toggleAmountPaidVisibility();
                updateTransactionNumberDisplay();
                document.getElementById('recurringOptions').style.display = 'none';
            }, 1500);
        }, 300);
    });
    
    // Transaction List Actions
    fullTransactionList.addEventListener('click', (e) => {
        const transactionId = e.target.dataset.id;
        if (!transactionId) return;
        const transactionIndex = transactions.findIndex(t => t.id === transactionId);
        if (transactionIndex === -1) return;
        if (e.target.classList.contains('delete-btn')) {
            if (confirm('Are you sure you want to delete this transaction?')) {
                transactions.splice(transactionIndex, 1);
                saveTransactions(); updateDashboard(); renderFullTransactionList();
            }
        } else if (e.target.classList.contains('repay-btn')) {
            const transaction = transactions[transactionIndex];
            if (confirm(`Record a full payment for "${transaction.name}"?`)) {
                transaction.amountPaid = transaction.amountDue;
                saveTransactions(); updateDashboard(); renderFullTransactionList();
            }
        } else if (e.target.classList.contains('pdf-btn')) {
            generatePdf(transactionId);
        } else if (e.target.classList.contains('edit-btn')) {
            const t = transactions[transactionIndex];
            document.getElementById('transactionId').value = t.id;
            document.getElementById('transactionDate').value = t.date;
            document.getElementById('transactionName').value = t.name;
            document.getElementById('transactionTypeSelect').value = t.type;
            document.getElementById('amountDueInput').value = t.amountDue;
            document.getElementById('amountPaidInput').value = t.amountPaid;
            document.getElementById('jobNotesInput').value = t.jobNotes;
            updateJobTypeDropdown();
            document.getElementById('jobTypeSelect').value = t.jobType;
            toggleAmountPaidVisibility();
            document.getElementById('addTransactionBtn').textContent = 'Update Transaction';
            showView('dashboardView');
            document.getElementById('transactionForm').scrollIntoView({ behavior: 'smooth' });
        }
    });

    // Filter Listeners
    document.getElementById('applyFiltersBtn').addEventListener('click', renderFullTransactionList);
    document.getElementById('transactionSearchInput').addEventListener('input', renderFullTransactionList);
    document.getElementById('resetFiltersBtn').addEventListener('click', () => {
        ['transactionSearchInput', 'filterTransactionType', 'filterJobType', 'filterPaidStatus', 'filterStartDate', 'filterEndDate'].forEach(id => document.getElementById(id).value = '');
        renderFullTransactionList();
    });
    document.getElementById('exportCsvBtn').addEventListener('click', () => {
        if (transactions.length === 0) return alert('No transactions to export.');
        const headers = ["ID", "Date", "Name", "Type", "Category", "Amount Due", "Amount Paid", "Notes"];
        const rows = transactions.map(t => [t.id, t.date, t.name, t.type, t.jobType, t.amountDue, t.amountPaid, t.jobNotes || '']);
        const processRow = row => row.map(val => `"${(val || '').toString().replace(/"/g, '""')}"`).join(',');
        const csv = [headers.join(','), ...rows.map(processRow)].join('\n');
        const link = document.createElement("a");
        link.href = 'data:text/csv;charset=utf-8,' + encodeURI(csv);
        link.download = `${businessName}_Transactions.csv`;
        link.click();
        link.remove();
    });
    document.getElementById('analyticsYearSelect').addEventListener('change', e => renderAnalyticsPage(e.target.value));

    // Settings Page Listeners
    
    document.getElementById('saveBusinessNameBtn').addEventListener('click', () => {
        const newName = document.getElementById('businessNameSetting').value.trim();
        if (newName) {
            localStorage.setItem('businessName', newName);
            businessName = newName;
            appNameHeader.textContent = `${businessName} Dashboard`;
            document.title = `${businessName} Tracker`;
            alert('Business name updated!');
        }
    });
    
    document.getElementById('saveCompanyDetailsBtn').addEventListener('click', () => {
        companyDetails = {
            address: document.getElementById('companyAddressSetting').value.trim(),
            phone: document.getElementById('companyPhoneSetting').value.trim(),
            email: document.getElementById('companyEmailSetting').value.trim(),
            website: document.getElementById('companyWebsiteSetting').value.trim()
        };
        localStorage.setItem('companyDetails', JSON.stringify(companyDetails));
        alert('Company details updated!');
    });
    
    const importFileInput = document.getElementById('importFileInput');
    document.getElementById('importDataBtn').addEventListener('click', () => importFileInput.click());
    importFileInput.addEventListener('change', (event) => {
        const file = event.target.files[0];
        if (!file || !confirm("WARNING: Importing data will overwrite ALL existing application data. Continue?")) { importFileInput.value = ''; return; }
        const reader = new FileReader();
        reader.onload = function(e) {
            try {
                const importedData = JSON.parse(e.target.result);
                if (!importedData.exportMetadata || !importedData.exportMetadata.appName.includes("ClearScape")) { alert("This does not appear to be a valid ClearScape backup file."); return; }
                localStorage.setItem('transactions', JSON.stringify(importedData.transactions || []));
                localStorage.setItem('recurringTemplates', JSON.stringify(importedData.recurringTemplates || []));
                localStorage.setItem('clients', JSON.stringify(importedData.clients || []));
                if (importedData.userCategories) { localStorage.setItem('userCategories', JSON.stringify(importedData.userCategories)); }
                if (importedData.settings) { for (const key in importedData.settings) { if (importedData.settings.hasOwnProperty(key)) { localStorage.setItem(key, importedData.settings[key]); } } }
                alert('Data imported successfully! The application will now reload to apply the changes.');
                location.reload();
            } catch (error) { console.error("Import Error:", error); alert('Error reading the backup file. It might be corrupted or in the wrong format.');
            } finally { importFileInput.value = ''; }
        };
        reader.readAsText(file);
    });

    document.getElementById('exportDataBtn').addEventListener('click', () => {
        try {
            const dataToExport = {
                transactions: transactions, recurringTemplates: recurringTemplates, clients: clients, userCategories: defaultCategories,
                settings: { initialBalance: localStorage.getItem('initialBalance') || 0, settingsPassword: localStorage.getItem('settingsPassword') || '0000', businessName: localStorage.getItem('businessName') || 'ClearScape', userName: localStorage.getItem('userName') || 'User', currency: localStorage.getItem('currency') || 'GBP' },
                exportMetadata: { appName: "ClearScape Financial Tracker", exportDate: new Date().toISOString() }
            };
            const jsonString = JSON.stringify(dataToExport, null, 2);
            const blob = new Blob([jsonString], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const link = document.createElement('a');
            link.href = url;
            const date = new Date().toISOString().split('T')[0];
            link.download = `clearscape_backup_${date}.json`;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            URL.revokeObjectURL(url);
            alert('Data export successful!');
        } catch (error) { console.error("Export failed:", error); alert("An error occurred during the data export."); }
    });

    document.getElementById('resetAppBtn').addEventListener('click', () => {
        if (confirm("DANGER: Are you absolutely sure?") && confirm("This will delete ALL data permanently. Continue?")) {
            localStorage.clear();
            alert('Application has been reset.');
            location.reload();
        }
    });
    
    // --- Wizard Navigation ---
    const wizardNav = {
        nextStepName: { next: 2, validate: () => document.getElementById('userNameInput').value.trim() !== '', alert: 'Please enter your name.', save: () => localStorage.setItem('userName', document.getElementById('userNameInput').value.trim()) },
        backStepBusinessName: { next: 1 },
        nextStepBusinessName: { next: 3, validate: () => document.getElementById('businessNameInput').value.trim() !== '', alert: 'Please enter a business name.', save: () => localStorage.setItem('businessName', document.getElementById('businessNameInput').value.trim()) },
        backStepCompanyDetails: { next: 2 },
        nextStepCompanyDetails: { next: 4, save: () => { const details = { address: document.getElementById('companyAddressInput').value.trim(), phone: document.getElementById('companyPhoneInput').value.trim(), email: document.getElementById('companyEmailInput').value.trim(), website: document.getElementById('companyWebsiteInput').value.trim() }; localStorage.setItem('companyDetails', JSON.stringify(details)); } },
        backStepCurrency: { next: 3 },
        nextStepCurrency: { next: 5, save: () => localStorage.setItem('currency', document.getElementById('currencySetupSelect').value) },
        backStepPassword: { next: 4 },
        nextStepPassword: { next: 6, validate: () => document.getElementById('passwordSetupInput').value.trim() !== '', alert: 'Please create a password.', save: () => localStorage.setItem('settingsPassword', document.getElementById('passwordSetupInput').value) },
        backStepSecurity: { next: 5 },
        nextStepSecurity: { next: 7, validate: () => document.getElementById('securityA1').value.trim() !== '' && document.getElementById('securityA2').value.trim() !== '', alert: 'Please answer both security questions.', save: () => { const questions = [ { q: document.getElementById('securityQ1').value, a: document.getElementById('securityA1').value.trim().toLowerCase() }, { q: document.getElementById('securityQ2').value, a: document.getElementById('securityA2').value.trim().toLowerCase() } ]; localStorage.setItem('securityQuestions', JSON.stringify(questions)); } },
        backStepBalance: { next: 6 },
        nextStepBalance: { next: 8, validate: () => document.getElementById('balanceSetupInput').value !== '', alert: 'Please enter a starting balance (0 is okay).', save: () => localStorage.setItem('initialBalance', parseFloat(document.getElementById('balanceSetupInput').value)), action: renderWizardCategoryList },
        backStepCategories: { next: 7 }
    };
    for (const id in wizardNav) {
        document.getElementById(id).addEventListener('click', () => {
            const config = wizardNav[id];
            if (config.validate && !config.validate()) return alert(config.alert);
            if (config.save) config.save();
            if (config.action) config.action();
            showSetupStep(config.next);
        });
    }
    
    document.getElementById('addCategoryWizardBtn').addEventListener('click', () => {
        const input = document.getElementById('categorySetupInput');
        const typeSelect = document.getElementById('categoryTypeSetupSelect');
        const newCat = input.value.trim();
        const catType = typeSelect.value;
        if (newCat) {
            const allCats = Object.values(defaultCategories).flat();
            if (!allCats.find(c => c.toLowerCase() === newCat.toLowerCase())) {
                if (defaultCategories[catType]) { defaultCategories[catType].push(newCat); }
                else { defaultCategories[catType] = [newCat]; }
                renderWizardCategoryList(); input.value = '';
            } else { alert('That category already exists.'); }
        }
    });

    document.getElementById('finishSetupBtn').addEventListener('click', () => {
        localStorage.setItem('userCategories', JSON.stringify(defaultCategories));
        localStorage.setItem('setupComplete', 'true');
        location.reload();
    });

    const modal = document.getElementById('forgotPasswordModal');
    const securityQuestionsContainer = document.getElementById('securityQuestionsContainer');
    const newPasswordContainer = document.getElementById('newPasswordContainer');
    document.getElementById('forgotPasswordSplashLink').addEventListener('click', (e) => {
        e.preventDefault();
        securityQuestions = JSON.parse(localStorage.getItem('securityQuestions')) || [];
        if (securityQuestions.length === 0) { alert('No security questions have been set up for this account.'); return; }
        securityQuestionsContainer.innerHTML = securityQuestions.map((item, index) => `<div class="form-group" style="text-align: left; margin-bottom: 15px;"><label for="resetA${index+1}">${item.q}</label><input type="text" id="resetA${index+1}" placeholder="Your Answer" required></div>`).join('');
        newPasswordContainer.classList.add('hidden');
        modal.classList.remove('hidden');
    });
    modal.querySelector('.modal-close-btn').addEventListener('click', () => { modal.classList.add('hidden'); });
    document.getElementById('checkAnswersBtn').addEventListener('click', () => {
        const answer1 = document.getElementById('resetA1').value.trim().toLowerCase();
        const answer2 = document.getElementById('resetA2').value.trim().toLowerCase();
        if (answer1 === securityQuestions[0].a && answer2 === securityQuestions[1].a) { newPasswordContainer.classList.remove('hidden'); }
        else { alert('One or more answers are incorrect.'); }
    });
    document.getElementById('saveNewPasswordBtn').addEventListener('click', () => {
        const newPassword = document.getElementById('newPasswordResetInput').value;
        if (newPassword.length < 4) { alert('Password must be at least 4 characters long.'); return; }
        localStorage.setItem('settingsPassword', newPassword);
        alert('Password has been reset successfully!');
        modal.classList.add('hidden');
    });

    function saveCategories() { localStorage.setItem('userCategories', JSON.stringify(defaultCategories)); updateJobTypeDropdown(); }
    document.getElementById('manageCategoriesBtn').addEventListener('click', () => { renderCategoryManagementList(); showView('categoryView'); });
    document.getElementById('backToSettingsFromCategoryBtn').addEventListener('click', () => { showView('settingsView'); populateSettingsPage(); });
    function renderCategoryManagementList() {
        const list = document.getElementById('categoryList'); if (!list) return; list.innerHTML = '';
        for (const type in defaultCategories) {
            if (defaultCategories.hasOwnProperty(type) && defaultCategories[type].length > 0) {
                const typeHeader = document.createElement('h5'); typeHeader.textContent = type; typeHeader.style.cssText = 'text-align: left; margin-top: 15px; padding-bottom: 5px; border-bottom: 1px solid #ccc;'; list.appendChild(typeHeader);
                const subList = document.createElement('ul'); subList.style.cssText = 'list-style: none; padding-left: 10px;';
                defaultCategories[type].forEach(cat => {
                    const li = document.createElement('li'); li.style.cssText = 'display: flex; justify-content: space-between; align-items: center; text-align: left; padding: 8px 0;';
                    const isDefault = initialDefaultCategories[type]?.includes(cat); let deleteButton = '';
                    if (!isDefault) { deleteButton = `<button class="delete-btn delete-category-btn" data-name="${cat}" data-type="${type}" style="padding: 3px 8px; font-size: 0.8em;">Delete</button>`; }
                    li.innerHTML = `<span>${cat}</span>${deleteButton}`; subList.appendChild(li);
                });
                list.appendChild(subList);
            }
        }
    }
    document.getElementById('addCategoryBtn').addEventListener('click', () => {
        const input = document.getElementById('newCategoryInput'); const typeSelect = document.getElementById('newCategoryTypeSelect');
        const newCat = input.value.trim(); const catType = typeSelect.value;
        if (!newCat) return alert('Please enter a category name.');
        const allCats = Object.values(defaultCategories).flat();
        if (!allCats.find(c => c.toLowerCase() === newCat.toLowerCase())) { defaultCategories[catType].push(newCat); saveCategories(); renderCategoryManagementList(); input.value = ''; }
        else { alert('That category already exists.'); }
    });
    document.getElementById('categoryList').addEventListener('click', (e) => {
        if (e.target && e.target.classList.contains('delete-category-btn')) {
            const catName = e.target.dataset.name; const catType = e.target.dataset.type;
            if (confirm(`Are you sure you want to delete the category "${catName}"?`)) {
                const categoryArray = defaultCategories[catType]; const catIndex = categoryArray.indexOf(catName);
                if (catIndex > -1) { categoryArray.splice(catIndex, 1); saveCategories(); renderCategoryManagementList(); }
            }
        }
    });

    document.getElementById('prevMonthBtn').addEventListener('click', () => { navDate.setMonth(navDate.getMonth() - 1); renderCalendar(navDate); });
    document.getElementById('nextMonthBtn').addEventListener('click', () => { navDate.setMonth(navDate.getMonth() + 1); renderCalendar(navDate); });
    document.getElementById('addReminderForm').addEventListener('submit', (e) => {
        e.preventDefault();
        const reminderText = document.getElementById('reminderText').value; const reminderDate = document.getElementById('reminderDate').value;
        if (reminderText && reminderDate) {
            reminders.push({ id: `rem_${Date.now()}`, date: reminderDate, text: reminderText });
            saveReminders(); selectedDate = reminderDate; navDate = new Date(reminderDate + 'T00:00:00');
            renderCalendar(navDate); renderReminders(selectedDate);
            document.getElementById('addReminderForm').reset();
            document.getElementById('reminderDate').value = selectedDate;
        }
    });
    
    function initializeExpandableCards() {
        const allCards = document.querySelectorAll('.summary-card');
        allCards.forEach(card => {
            card.removeEventListener('click', toggleCardExpansion);
            card.addEventListener('click', toggleCardExpansion);
        });
    }
    function toggleCardExpansion(event) {
        if (event.target.closest('a, button')) { return; }
        this.classList.toggle('is-expanded');
    }
    function initializeDashboardSortable() {
        const container = document.querySelector('#dashboardView .summary-cards-container');
        if (container) {
            new Sortable(container, {
                animation: 150, ghostClass: 'sortable-ghost',
                onEnd: function (evt) {
                    const newOrder = Array.from(container.children).map(card => card.id);
                    dashboardCardOrder = newOrder;
                    localStorage.setItem('dashboardCardOrder', JSON.stringify(newOrder));
                }
            });
        }
    }

    // --- Radial Menu Logic ---
    const menuToggleBtn = document.getElementById('menuToggleBtn');
    const radialMenu = document.querySelector('.radial-menu');

    menuToggleBtn.addEventListener('click', (e) => {
        e.stopPropagation(); // Prevent the click from bubbling up
        radialMenu.classList.toggle('open');
    });
    
    initializeExpandableCards();
    initializeDashboardSortable();
});